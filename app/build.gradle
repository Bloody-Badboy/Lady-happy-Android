apply plugin: 'com.android.application'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'io.fabric'
apply from: 'keys.gradle'

def versionProp = loadProperties('version.properties')
def version = versionProp['VERSION'] as int
def sub_version = versionProp['SUB_VERSION'] as int
def build_version = versionProp['BUILD_VERSION'] as int
def verCode = version * 100000 + sub_version * 1000 + build_version
def verName = "$version.$sub_version.$build_version"

android {
    compileSdkVersion versions.compileSdkVersion
    buildToolsVersion versions.buildToolsVersion

    defaultConfig {
        applicationId "com.egoriku.ladyhappy"
        minSdkVersion versions.minSdkVersion
        targetSdkVersion versions.compileSdkVersion
        versionCode verCode
        versionName verName
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            resValue "string", "app_name", "Lady Happy"
            resValue("string", "hockey_app_id", "\"$hockey_app_id_debug\"")
        }

        debug {
            resValue "string", "app_name", "Lady Happy Beta"
            resValue("string", "hockey_app_id", "\"$hockey_app_id_debug\"")
        }
    }

    gradle.taskGraph.whenReady { taskGraph ->
        //if (taskGraph.hasTask(assembleDebug) || taskGraph.hasTask(assembleRelease)) {
        if (taskGraph.hasTask(assembleRelease)) {
            autoIncrementBuildVersionNumber()
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "${"Lady Happy"}.${variant.name}_${variant.versionName}.apk"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation(libs.espresso, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation libs.junit
    implementation libs.googlePlayServices
    implementation libs.appcompat
    implementation libs.design
    implementation libs.constraint
    implementation libs.firebaseStorage
    implementation libs.firebaseDatabase
    implementation libs.firebaseAuth
    implementation libs.firebaseFirestore
    implementation libs.firebaseAnalytics
    implementation('com.crashlytics.sdk.android:crashlytics:2.7.1@aar') {
        transitive = true
    }
    implementation libs.kotlin
    implementation libs.glide
    implementation libs.palette
    implementation libs.cardview
    implementation libs.hockeyApp
    implementation libs.multidex
    implementation libs.rxJava
    implementation libs.rxAndroid
    implementation libs.cicerone
    implementation libs.dagger
    kapt libs.daggerCompiler
    implementation libs.anko_v4
    implementation libs.anko_v7
    implementation libs.coreLibKt
    implementation libs.lottie
    implementation libs.materialDrawerKt
    implementation libs.adapterDelegate

    ext{
        archComponents = "1.0.0"
    }

    implementation "android.arch.lifecycle:extensions:$archComponents"
    kapt "android.arch.lifecycle:compiler:$archComponents"
}

apply plugin: 'com.google.gms.google-services'

Properties loadProperties(String path) {
    def file = file(path)
    if (file.canRead() && file.canWrite()) {
        Properties properties = new Properties()
        properties.load(new FileInputStream(file))
        return properties
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

def autoIncrementBuildVersionNumber() {
    def prop = loadProperties('version.properties')
    def newVersion = (prop['BUILD_VERSION'] as int) + 1
    prop['BUILD_VERSION'] = newVersion as String
    prop.store(file('version.properties').newWriter(), null)
}
